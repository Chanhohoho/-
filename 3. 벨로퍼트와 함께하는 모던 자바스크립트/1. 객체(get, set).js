const numbers = {
    _a: 1,
    _b: 2,   

    get a() {
        if(this._a<0) return 0;
        return this._a;
    },

    get b() {
        return this._b;
    },

    set a(newA) {
        this._a = newA;
    },

    set b(newB) {
        if(newB<0) newB = 0;
        this._b = newB;
    },
};

console.log(numbers.a); numbers.a = 5;
console.log(numbers.a);
console.log(numbers.a + numbers.b);

// 결과값
// 
// 1
// 5
// 7

// 객체 지향 프로그래밍에서는 객체 외부에서 객체의 속성에 직접적으로 접근하는것을 막는다.
// 객체의 무결성이 깨질 수 있기 때문이다.

// get과 set 키워드는 객체의 속성에 대한 접근과 할당을 컨트롤하기 위해 만들어진 기능이다.
// 객체의 속성에 접근하는 방식을 조절하여, 값을 수정하거나 조회할 때 
// 추가적인 동작을 수행하여, 이를 통해 객체의 속성을 더욱 안전하고 유연하게 관리할 수 있습니다
    
// get 키워드는 객체의 속성을 읽을 때 호출되는 메소드를 정의합니다.
// 이 메소드는 속성 값을 반환하거나 가공한 후 반환하는 역할을 수행합니다.

// set 키워드는 객체의 속성에 값을 할당할 때 호출되는 메소드를 정의합니다.
// 이 메소드는 할당된 값을 속성에 저장하기 전에 유효성 검사, 변환 작업 등을 수행할 수 있습니다.
// 이를 통해 속성 값의 유효성을 검증하거나 특정 조건을 충족시키도록 할 수 있습니다.

// get 키워드
// numbers.a() 를 실행한 것이 아니라 number.a 를 조회했을 뿐인데, 함수가 실행되고 그 결과값이 출력되었다.
// 특정 값을 조회 할 때 우리가 설정한 함수로 연산된 값을 반환합니다.

// set 키워드
// numbers.a = 5; 에서 a(5)가 실행되어 numbers._a 에 5 가 할당된다.